---
- hosts: all
  become: true
  vars:
    suricata_interface: [ens5]
    internal_domain: "aecid-testbed.local"
    suricata_home_nets: ["172.17.100.0/24"]
    netflow_enabled: true
    weaklinuxuser_name: "john"
  tasks: 
    - name: Allow password login
      ansible.builtin.copy:
        dest: /etc/ssh/sshd_config.d/99-password.conf
        content: 'PasswordAuthentication yes'
  roles:
    - role: squidproxy
      vars:
        squid_networks:
          - { name: "usernet", cidr: "192.168.50.0/24" }
        squid_logfile: "/var/log/squid/access.log"
    - role: aeciduser
      vars:
            # pass: aecid
            aeciduser_pass: "$6$9AqxTPJqYsFXwgPN$xAC4y1Vndk00EaBCuFcJC37BYDYYVAgt9SHymg15KSdKddZnwG.SsQaJvHarH4DYQj3tuboeLa4G5EfL7itcC0"
    - role: weaklinuxuser
      vars: 
            weaklinuxuser_user: "{{ weaklinuxuser_name }}"
            weaklinuxuser_sudo: False
            weaklinuxuser_groups:
              - sudo
    - role: suricata
    - role: dnsmasq
      vars:
       dnsmasq_config:
         - { name: "logging",  content: "log-queries" }
         - { name: "puppetserver", content: "address=/puppet.{{ internal_domain }}/172.17.100.122" }
         - { name: "linuxshare", content: "address=/linuxshare.{{ internal_domain }}/192.168.100.23" }
         - { name: "kafka", content: "address=/kafka.{{ internal_domain }}/192.168.100.10" }
         - { name: "cloud", content: "address=/cloud.{{ internal_domain }}/172.17.100.125" }
       dnsmasq_systemd_resolved_disable: true
    - role: shorewall
      vars:
        shorewall_startup: 0
        shorewall_ipforward: "On"
        shorewall_configs:
          zones:
            - { name: inet,
                type: ipv4,
                interface: { name: $INETIF, broadcast: detect, options: "routeback,nosmurfs" }
              }
            - {
                name: lan,
                type: ipv4,
                interface: { name: $LANIF, broadcast: detect, options: "routeback,bridge,nosmurfs" }
              }
            - {
                name: dmz,
                type: ipv4,
                interface: { name: $DMZIF, broadcast: detect, options: "routeback,bridge,nosmurfs" }
              }
            - {
                name: admin,
                type: ipv4,
                interface: { name: $ADMINIF, broadcast: detect, options: "routeback,bridge,nosmurfs" }
              }
            - {
                name: user,
                type: ipv4,
                interface: { name: $USERIF, broadcast: detect, options: "routeback,bridge,nosmurfs" }
              }
          policy:
            - { source: fw,    dest: all,   policy: ACCEPT }
            - { source: admin,    dest: all,   policy: ACCEPT }
            - { source: lan,   dest: inet,  policy: ACCEPT }
            - { source: lan,   dest: dmz,  policy: ACCEPT }
            - { source: dmz,   dest: inet,  policy: ACCEPT }
            - { source: user,   dest: all,   policy: REJECT, log: info }
            - THIS POLICY HAS TO BE THE LAST
            - { source: all,   dest: all,   policy: REJECT, log: info }
          rules:
            - Cloud Ports
            - { action: DNAT, source: inet, dest: "dmz:$CLOUD", proto: tcp, dest_port: 8080 }
            - Videoserver Ports
            - { action: DNAT, source: inet, dest: "dmz:$VIDEOSERVER", proto: tcp, dest_port: 80 }
            - { action: DNAT, source: inet, dest: "dmz:$VIDEOSERVER:22", proto: tcp, dest_port: 2222 }
            - Reposerver Ports
            - { action: DNAT, source: inet, dest: "dmz:$REPOSERVER:22", proto: tcp, dest_port: 10022 }
            - { action: DNAT, source: inet, dest: "dmz:$REPOSERVER", proto: tcp, dest_port: 3389 }
            - { action: DNAT, source: inet, dest: "dmz:$REPOSERVER", proto: tcp, dest_port: 4501 }
            - { action: DNAT, source: inet, dest: "dmz:$REPOSERVER", proto: tcp, dest_port: 5901 }
            - Reposerver to Linux-Share
            - { action: ACCEPT, source: dmz, dest: "lan:$LINUXSHARE", proto: tcp, dest_port: 1881 }
            - { action: ACCEPT, source: dmz, dest: "lan:$LINUXSHARE", proto: tcp, dest_port: 111,2049 }
            - { action: ACCEPT, source: dmz, dest: "lan:$LINUXSHARE", proto: udp, dest_port: 111,2049 }
            - Kafka Ports
            - { action: ACCEPT, source: dmz, dest: "lan:$KAFKA", proto: tcp, dest_port: 9092 }  
            - { action: DNAT, source: inet, dest: "lan:$KAFKA", proto: tcp, dest_port: 9092 }
            - Usernet access to Squid proxy (3128/tcp) on the firewall
            - { action: ACCEPT, source: user, dest: fw, proto: tcp, dest_port: 3128 }
            - Allow fw to DMZ for browser traffic (to let client browse videoserver login page)
            - { action: ACCEPT, source: fw, dest: dmz, proto: tcp, dest_port: 80 }
            - { action: ACCEPT, source: fw, dest: dmz, proto: tcp, dest_port: 443 }
            - Usernet access for reverse tcp (4443/tcp) to the attacker machine 
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 4443 }
            - Usernet access to inet for rust-desk screen sharing
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 21114} 
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 21115 }
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 21116 }
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 21117 }
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 21118 } 
            - { action: ACCEPT, source: user, dest: inet, proto: tcp, dest_port: 8000 }  
            - { action: ACCEPT, source: user, dest: inet, proto: udp, dest_port: 21116 }   
            - Usernet access to inet for veiltransfer udp       
            - { action: ACCEPT, source: user, dest: inet, proto: udp, dest_port: 443 } 
            - Permit access to SSH
            - { action: SSH/ACCEPT,  source: lan, dest: fw }
            - { action: SSH/ACCEPT,  source: dmz, dest: fw }
            - { action: SSH/ACCEPT,  source: admin, dest: fw }
            - Permit access to DNS
            - { action: DNS/ACCEPT,  source: lan, dest: fw }
            - { action: DNS/ACCEPT,  source: dmz, dest: fw }
            - { action: DNS/ACCEPT,  source: admin, dest: fw }
            - { action: DNS/ACCEPT,  source: user, dest: fw }
            # - { action: ACCEPT,      source: inet, dest: fw, proto: tcp, dest_port: "443,8006" }
            - PING Rules
            - { action: Ping/ACCEPT, source: all, dest: all }
          snat:
            - { dest: $INETIF, source: 192.168.100.0/24 }
            - { dest: $INETIF, source: 172.17.100.0/24 }
            - { dest: $INETIF, source: 192.168.50.0/24 }
          params:
            - Interfaces
            - { name: INETIF, value: ens3 }
            - { name: LANIF, value: ens4 }
            - { name: DMZIF, value: ens5 }
            - { name: ADMINIF, value: ens6 }
            - { name: USERIF, value: ens7 }
            - { name: REPOSERVER, value: 172.17.100.122}
            - { name: CLOUD, value: 172.17.100.125}
            - { name: LINUXSHARE, value: 192.168.100.23}
            - { name: VIDEOSERVER, value: 172.17.100.121}
            - { name: KAFKA, value: 192.168.100.10}
 
    - role: auditd
    - role: filebeat
      vars:
        filebeat_service_enabled: false
        filebeat_output_kafka_enabled: true
        filebeat_output_kafka_hosts:
          - "kafka.aecid-testbed.local:9092"
        filebeat_output_kafka_topic: "logs"
        filebeat_template: "filebeatkafka.yml.j2"
        filebeat_inputs:
          - type: log
            paths:
              - "/var/log/*.log"  # includes auth.log
              - "/var/log/syslog"
        filebeat_output_logstash_enabled: false
        filebeat_modules:
          - tpl: "suricata.yml"
            paths: ["/var/log/suricata/eve.json"]
          - tpl: "auditd.yml"
            paths: ["/var/log/audit/audit.log"]
  tasks:
    - name: Start Shorewall on startup
      lineinfile: >
        dest=/etc/default/shorewall
        line="startup=1"
        regexp="^startup="
        state=present
    - name: Add kafka host entry in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "192.168.100.10 kafka.aecid-testbed.local"
        state: present
